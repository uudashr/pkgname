package pkgname

import (
	"fmt"
	"go/ast"
	"strings"

	"golang.org/x/tools/go/analysis"
	"golang.org/x/tools/go/analysis/passes/inspect"
	"golang.org/x/tools/go/ast/inspector"
)

// Analyzer analyzes Go idiomatic package naming conventions.
var Analyzer = NewAnalyzer()

// NewAnalyzer creates a new instance of the pkgname analyzer.
func NewAnalyzer() *analysis.Analyzer {
	r := runner{}

	analyzer := &analysis.Analyzer{
		Name:     "pkgname",
		Doc:      "Detects package names that do not follow Go idiomatic naming conventions.",
		URL:      "https://pkg.go.dev/github.com/uudashr/pkgname",
		Requires: []*analysis.Analyzer{inspect.Analyzer},
		Run:      r.run,
	}

	analyzer.Flags.BoolVar(&r.debug, "nerd", false, "enable nerd mode")
	analyzer.Flags.BoolVar(&r.includeImportAlias, "include-import-alias", false, "include import alias in the analysis")

	return analyzer
}

type runner struct {
	debug              bool
	includeImportAlias bool
}

func (r *runner) run(pass *analysis.Pass) (any, error) {
	r.debugln("Pkg:", pass.Pkg.Path(), "Module:", pass.Module.Path)

	if pkgPath := pass.Pkg.Path(); strings.HasSuffix(pkgPath, ".test") {
		// Skip test packages, generated by `go test`
		r.debugln("  Skipping test package:", pkgPath)

		return nil, nil
	}

	inspect := pass.ResultOf[inspect.Analyzer].(*inspector.Inspector)

	nodeFilter := []ast.Node{
		(*ast.File)(nil),
	}

	inspect.Preorder(nodeFilter, func(n ast.Node) {
		f := n.(*ast.File)

		filename := pass.Fset.Position(f.Pos()).Filename

		r.debugln("  Processing file:", filename)
		r.debugln("    Package name:", f.Name.Name)

		pkgName := f.Name.Name
		pkgName = strings.TrimSuffix(pkgName, "_test")

		if strings.Contains(pkgName, "_") {
			r.debugf("      Diag: found package '%s', should not use under_score in package name\n", pkgName)
			pass.Reportf(f.Package, "found package '%s', should not use under_score in package name", pkgName)
		}

		if strings.ToLower(pkgName) != pkgName {
			r.debugf("      Diag: found package '%s', should not use mixedCaps in package name\n", pkgName)
			pass.Reportf(f.Package, "found package '%s', should not use mixedCaps in package name", pkgName)
		}

		if !r.includeImportAlias {
			return
		}

		for _, imp := range f.Imports {
			if r.debug {
				importPath := strings.Trim(imp.Path.Value, "\"")
				fmt.Printf("      import name: %q, path: %q\n", imp.Name, importPath)
			}

			if imp.Name == nil {
				continue
			}

			importName := imp.Name.Name

			if importName == "_" {
				continue
			}

			if importName == "." {
				continue
			}

			if strings.Contains(importName, "_") {
				importPath := strings.Trim(imp.Path.Value, "\"")

				r.debugf("        Diag: found import '%s' with alias '%s', should not use under_score in package alias name\n", importPath, importName)
				pass.Reportf(imp.Name.NamePos, "found import '%s' with alias '%s', should not use under_score in package alias name", importPath, importName)
			}

			if strings.ToLower(importName) != importName {
				importPath := strings.Trim(imp.Path.Value, "\"")

				r.debugf("        Diag: found import '%s' with alias '%s', should not use mixedCaps in package alias name\n", importPath, importName)
				pass.Reportf(imp.Name.NamePos, "found import '%s' with alias '%s', should not use mixedCaps in package alias name", importPath, importName)
			}
		}
	})

	return nil, nil
}

func (r *runner) debugf(format string, args ...any) {
	if r.debug {
		fmt.Printf(format, args...)
	}
}

func (r *runner) debugln(args ...any) {
	if r.debug {
		fmt.Println(args...)
	}
}
